# -*- coding: utf-8 -*-
"""hand_gesture_underwater_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14x0soqyZH-V2s2sgex0AyZuFF1rcplLf

## Loading Libraries
All Python capabilities are not loaded to our working environment by default (even they are already installed in your system). So, we import each and every library that we want to use.

We chose alias names for our libraries for the sake of our convenience (numpy --> np and pandas --> pd, tensorlow --> tf).

Note: You can import all the libraries that you think will be required or can import it as you go along.
"""

!wget https://s3.us-west-1.wasabisys.com/dphi/public-datasets/Data%20Sprint%2084%20Caddy%20Gesture%20Recognition/Caddy_gestures.zip

!apt-get install p7zip-full

!7za x /content/Caddy_gestures.zip

import pandas as pd                                     # Data analysis and manipultion tool
import numpy as np                                      # Fundamental package for linear algebra and multidimensional arrays
import tensorflow as tf                                 # Deep Learning Tool
import os                                               # OS module in Python provides a way of using operating system dependent functionality
import cv2                                              # Library for image processing
from sklearn.model_selection import train_test_split    # For splitting the data into train and validation set

"""## Loading and preparing training data
The train and test images are given in two different folders - 'train' and 'test'. The labels of train images are given in a csv file 'Train.csv' with respective image id (i.e. image file name).

#### Getting the labels of the images
"""

labels = pd.read_csv("/content/Training_set.csv")   # loading the labels
labels.head()           # will display the first five rows in labels dataframe

labels['label'].unique()

labels.tail()            # will display the last five rows in labels dataframe

"""#### Getting images file path"""

file_paths = [[fname, '/content/train/' + fname] for fname in labels['filename']]

"""#### Confirming if no. of labels is equal to no. of images"""

# Confirm if number of images is same as number of labels given
if len(labels) == len(file_paths):
    print('Number of labels i.e. ', len(labels), 'matches the number of filenames i.e. ', len(file_paths))
else:
    print('Number of labels does not match the number of filenames')

"""#### Converting the file_paths to dataframe"""

images = pd.DataFrame(file_paths, columns=['filename', 'filepaths'])
images.head()

"""#### Combining the labels with the images"""

train_data = pd.merge(images, labels, how = 'inner', on = 'filename')
train_data.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
train_data['label'] = le.fit_transform(train_data['label'])

"""The 'train_data' dataframe contains all the image id, their locations and their respective labels. Now the training data is ready.

## Data Pre-processing
It is necessary to bring all the images in the same shape and size, also convert them to their pixel values because all machine learning or deep learning models accepts only the numerical data. Also we need to convert all the labels from categorical to numerical values.
"""

data = []     # initialize an empty numpy array
image_size = 100      # image size taken is 100 here. one can take other size too
for i in range(len(train_data)):
  
  img_array = cv2.imread(train_data['filepaths'][i], cv2.IMREAD_GRAYSCALE)   # converting the image to gray scale

  new_img_array = cv2.resize(img_array, (image_size, image_size),cv2.INTER_AREA)      # resizing the image array
  data.append([new_img_array, train_data['label'][i]])

# image pixels of a image
data[5]

"""#### Shuffle the data"""

np.random.shuffle(data)

"""#### Separating the images and labels

"""

x = []
y = []
for image in data:
  x.append(image[0])
  y.append(image[1])

# converting x & y to numpy array as they are list
x = np.array(x)
y = np.array(y)

np.unique(y, return_counts=True)

"""#### Splitting the data into Train and Validation Set
We want to check the performance of the model that we built. For this purpose, we always split (both independent and dependent data) the given data into training set which will be used to train the model, and test set which will be used to check how accurately the model is predicting outcomes.

For this purpose we have a class called 'train_test_split' in the 'sklearn.model_selection' module.
"""

x =  x.reshape(-1, 100, 100, 1)

# split the data
X_train, X_val, y_train, y_val = train_test_split(x,y,test_size=0.2, random_state = 42)

"""## Building Model
Now we are finally ready, and we can train the model.

There are many machine learning or deep learning models like Random Forest, Decision Tree, Multi-Layer Perceptron (MLP), Convolution Neural Network (CNN), etc. to say you some.


Then we would feed the model both with the data (X_train) and the answers for that data (y_train)
"""

cnn = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(100, 100, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    
    # tf.keras.layers.Flatten(input_shape=(100, 100, 1)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'), 
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(8, activation='softmax')
])

cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10, batch_size=4)

"""## Validate the model
WonderðŸ¤” how well your model learned! Lets check its performance on the X_val data.
"""

cnn.evaluate(X_val, y_val)

"""## Predict The Output For Testing Dataset 
We have trained our model, evaluated it and now finally we will predict the output/target for the testing data (i.e. Test.csv).

#### Load Test Set
Load the test data on which final submission is to be made.
"""

# Loading the order of the image's name that has been provided
test_image_order = pd.read_csv("/content/Testing_set.csv")
test_image_order.head()

"""#### Getting images file path"""

file_paths = [[fname, '/content/test/' + fname] for fname in test_image_order['filename']]

"""#### Confirm if number of images in test folder is same as number of image names in 'Testing_set_face_mask.csv'"""

# Confirm if number of images is same as number of labels given
if len(test_image_order) == len(file_paths):
    print('Number of image names i.e. ', len(test_image_order), 'matches the number of file paths i.e. ', len(file_paths))
else:
    print('Number of image names does not match the number of filepaths')

"""#### Converting the file_paths to dataframe"""

test_images = pd.DataFrame(file_paths, columns=['filename', 'filepaths'])
test_images.tail()

"""## Data Pre-processing on test_data

"""

test_pixel_data = []     # initialize an empty numpy array
image_size = 100      # image size taken is 100 here. one can take other size too
missing_files = []
for i in range(len(test_images)):
    img_array = cv2.imread(test_images['filepaths'][i], cv2.IMREAD_GRAYSCALE)   # converting the image to gray scale

    new_img_array = cv2.resize(img_array, (image_size, image_size))      # resizing the image array

    test_pixel_data.append(new_img_array)

test_pixel_data = np.array(test_pixel_data)

test_pixel_data =  test_pixel_data.reshape(-1, 100, 100, 1)

"""### Make Prediction on Test Dataset
Time to make a submission!!!
"""

pred = cnn.predict(test_pixel_data)

# The predicted values are the probabilities value
pred[0]

"""The above values are probability values. We need to convert it into respective classes. We can use np.argmax for the same."""

prediction = []
for value in pred:
  prediction.append(np.argmax(value))

predictions = le.inverse_transform(prediction)

"""## **How to save prediciton results locally via jupyter notebook?**
If you are working on Jupyter notebook, execute below block of codes. A file named 'submission.csv' will be created in your current working directory.
"""

res = pd.DataFrame({'filename': test_images['filename'], 'label': predictions})  # prediction is nothing but the final predictions of your model on input features of your new unseen test data
res.to_csv("submission.csv", index = False)      # the csv file will be saved locally on the same location where this notebook is located.

"""# **OR,**
**If you are working on Google Colab then use the below set of code to save prediction results locally**

## **How to save prediction results locally via colab notebook?**
If you are working on Google Colab Notebook, execute below block of codes. A file named 'prediction_results' will be downloaded in your system.
"""

res = pd.DataFrame({'filename': test_images['filename'], 'label': predictions})  # prediction is nothing but the final predictions of your model on input features of your new unseen test data
res.to_csv("submission.csv", index = False) 

# To download the csv file locally
from google.colab import files        
files.download('submission.csv')